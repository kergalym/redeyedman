# -*- coding: utf-8 -*-

# Copyright (C) 2017 Galym Kerimbekov <kegalym2@mail.ru>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

from application.core.datalogics import Utils
from application import app
from application import sql
from application import engine
from sqlalchemy import update
from os.path import isfile
from flask_login import login_required
from application.core.dbmodel import Users
from application.forms import loginform
from flask import flash
from flask import redirect
from flask import render_template
from flask import request
from flask import url_for


@app.route('/forgot/', methods=['GET', 'POST'])
def forgot_password():
    form_forgot = loginform.ForgotForm()
    utils = Utils()
    conn = engine.connect()
    abc = utils.abc_randomizer()
    secret_passwd = "/{}{}{}{}/{}{}{}{}{}/{}{}{}{}{}{}{}{}{}{}_{}{}{}_{}{}{}{}{}{}".format(
                                   abc[7], abc[14], abc[12], abc[4],
                                   abc[6], abc[0], abc[11], abc[24], abc[12],
                                   abc[17], abc[4], abc[3], abc[4], abc[24],
                                   abc[4], abc[3], abc[12], abc[0], abc[13],
                                   abc[13], abc[4], abc[22],
                                   abc[15], abc[0], abc[18], abc[18], abc[22],
                                   abc[3])
    if request.method == 'POST' and form_forgot.validate_on_submit():
        user = sql.session.query(Users).filter_by(
            email=form_forgot.email.data
        ).first()

        if user.email == form_forgot.email.data:
            passwordphrase = utils.randomstr(15)

            with open(secret_passwd, 'w') as f:
                f.write(str(passwordphrase))

            if isfile(secret_passwd):
                stmt = update(Users).where(
                    Users.id == user.id
                ).values(
                    password=utils.hash_password(passwordphrase)
                )

                conn.execute(stmt)
                conn.close()

            flash('Autogenerated password saved in safe place only my Creator knows', 'info')
            return redirect(url_for('forgot_password'))
        else:
            flash('Entered email {} not found. No password generated.'.format(form_forgot.email.data), 'error')
            return redirect(url_for('forgot_password'))

    return render_template('adminboard/forgot.html',
                           form=form_forgot
                           )
